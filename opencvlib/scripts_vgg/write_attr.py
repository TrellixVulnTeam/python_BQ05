# pylint: disable=C0103, too-few-public-methods, locally-disabled,
# no-self-use, unused-argument
'''Fix up JSON file to create region attributes where
there is a single region without attributes'''

import argparse
from os import path
#import jmespath

import opencvlib.imgpipes.vgg as vgg
from funclib.iolib import print_progress


def write_region_attributes(spp, part, regionid, subjectid, backup=True):
    '''(str, str, int, int, bool)->void
    Writes region_attributes according to the argumenst
    to the region key specied by regionid.

    region_attributes must be empty e.g.:
    5.jpg102254": {
    "regions": {
      "0": {"shape_attributes": {"name": "rect", ...},
            "region_attributes": { } }}

    This is purely a fix to save manual entry.
    '''
    dosave = False
    cnt = 0

    if not vgg.JSON_FILE:
        raise ValueError(
            'Unable to load VGG JSON file. Check the path is correct and that the file is not in use.')

    # first pass to get some stats
    dosave = False
    for key in vgg.JSON_FILE:

        if vgg.JSON_FILE[key]:
            if vgg.JSON_FILE[key]['regions']:
                if vgg.JSON_FILE[key]['regions'][str(regionid)]:
                    if  not vgg.JSON_FILE[key]['regions'][str(regionid)]['region_attributes']:
                        vgg.JSON_FILE[key]['regions'][str(regionid)]['region_attributes'] = {'subjectid':subjectid, 'part':part, 'species':spp}
                        cnt += 1
                        dosave = True

        print_progress(cnt, len(vgg.JSON_FILE), '%s of %s' %
                       (cnt, len(vgg.JSON_FILE)), bar_length=30)

    if dosave:
        vgg.save_json(backup)
        s = 'Wrote %s region_attributes of %s vgg defined images' % (cnt, len(vgg.JSON_FILE))
        print(s)
    else:
        print('\nCompleted without error. No regions matched criteria to fix.')


def main():
    '''main entry if run from commandline.

    Example:
    write_attr.py -s bass -b "C:/Users/Graham Monkman/OneDrive/Documents/PHD/images/bass/angler/bass-angler.json"
    '''
    cmdline = argparse.ArgumentParser(description='Write region_attributes in a VGG file for a defined species where'
                                      'a shape already exist.\n'
                                      'Example:\n'
                                      'write_attr.py -regionid 0 -subjectid 1 -part cephalothorax -spp lobster "C:/Users/Graham Monkman/OneDrive/Documents/PHD/images/lobster/vgg.json"'
                                      )

    # optional arguments
    cmdline.add_argument('-b', '--backup', help='Backup the VGG file before updating',
                         action='store_true')

    # position arguments
    cmdline.add_argument('file', help='VGG JSON file to manipulate')
    cmdline.add_argument('-part', '--part', help='The part label, eg head or body')
    cmdline.add_argument('-spp', '--spp', help='Species name to write to the VGG image files')
    cmdline.add_argument('-regionid', '--regionid', help='The Region identifier to write to, this is autmatically generated by VGG editor')
    cmdline.add_argument('-subjectid', '--subjectid', help='SubjectID to use which uniquely identify the subject')

    args = cmdline.parse_args()


    vgg.SILENT = False
    vgg.load_json(path.normpath(args.file), args.backup is True)


    if args.spp not in vgg.VALID_SPECIES:
        print('Species not found. Valid species are ' +
              ", ".join(vgg.VALID_SPECIES))
        return

    if args.part not in vgg.VALID_PARTS:
        print('Part not found. Valid parts are ' +
              ", ".join(vgg.VALID_PARTS))
        return


    try:
        dummy = int(args.regionid)
    except Exception:
        print('regionid must be an integer')
        return

    try:
        dummy = int(args.subjectid)
    except Exception:
        print('subjectid must be an integer')
        return

    print('Target file: %s' % path.normpath(args.file))
    print("Adding attributes species: %s, part: %s, regionid: %s, subjectid: %s ..." % (args.spp, args.part, args.regionid, args.subjectid))

    write_region_attributes(args.spp, args.part, args.regionid, args.subjectid, args.backup)


if __name__ == "__main__":
    main()
    #sys.exit(int(main() or 0))
